import pytest

class TestComplexQueries:
    """–¢–µ—Å—Ç—ã —Å–ª–æ–∂–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï"""
    
    @pytest.mark.parametrize("query,expected_drugs,min_expected,description,test_id", [
        ("—Å–∏–ª—å–Ω–∞—è –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π —á—Ç–æ –ø—Ä–∏–Ω—è—Ç—å", 
         ["–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª", "–ò–±—É–ø—Ä–æ—Ñ–µ–Ω"], 1,
         "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤: –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å + —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
         "complex_fever_headache"),
        
        ("–≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ —Å—É—Å—Ç–∞–≤–æ–≤ –∏ –±–æ–ª—å –≤ –∫–æ–ª–µ–Ω—è—Ö", 
         ["–ò–±—É–ø—Ä–æ—Ñ–µ–Ω", "–ö–µ—Ç–æ—Ä–æ–ª–∞–∫"], 1,
         "–°—É—Å—Ç–∞–≤–Ω—ã–µ –±–æ–ª–∏ –∏ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ",
         "complex_joint_pain"),
        
        ("–∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–µ—Å–Ω–æ–π —á–∏—Ö–∞–Ω–∏–µ –∑—É–¥ –≤ –Ω–æ—Å—É", 
         ["–¶–µ—Ç–∏—Ä–∏–∑–∏–Ω", "–õ–æ—Ä–∞—Ç–∞–¥–∏–Ω"], 1,
         "–°–µ–∑–æ–Ω–Ω–∞—è –∞–ª–ª–µ—Ä–≥–∏—è", 
         "complex_seasonal_allergy"),
        
        ("—Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∂–µ–ª—É–¥–∫–∞ –ø–æ—Å–ª–µ –µ–¥—ã —Ç–æ—à–Ω–æ—Ç–∞ –¥–∏–∞—Ä–µ—è", 
         ["–õ–æ–ø–µ—Ä–∞–º–∏–¥", "–ú–µ—Ç–æ–∫–ª–æ–ø—Ä–∞–º–∏–¥"], 1,
         "–ü–∏—â–µ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
         "complex_stomach_issue"),
        
        ("–≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —É—á–∞—â–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ", 
         ["–ê–º–ª–æ–¥–∏–ø–∏–Ω", "–ë–∏—Å–æ–ø—Ä–æ–ª–æ–ª", "–õ–æ–∑–∞—Ä—Ç–∞–Ω"], 1,
         "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã",
         "complex_cardio_symptoms"),
        
        ("–ø—Ä–æ—Å—Ç—É–¥–∞ –∫–∞—à–µ–ª—å –Ω–∞—Å–º–æ—Ä–∫ –±–æ–ª—å –≤ –≥–æ—Ä–ª–µ", 
         ["–ê–º–æ–∫—Å–∏—Ü–∏–ª–ª–∏–Ω", "–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª"], 1,
         "–ü—Ä–æ—Å—Ç—É–¥–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã",
         "complex_cold_symptoms"),
    ])
    def test_complex_medical_queries(self, medical_db, query, expected_drugs, min_expected, description, test_id):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô"""
        results = medical_db.search_drugs(query, n_results=8)
        found_drugs = [result['–ª–µ–∫–∞—Ä—Å—Ç–≤–æ'] for result in results]
        
        matches = [drug for drug in expected_drugs if drug in found_drugs]
        
        assert len(matches) >= min_expected, (
            f"–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' ({description}) –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(matches)} "
            f"–∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö {min_expected}. –ù–∞–π–¥–µ–Ω–æ: {matches}, –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {found_drugs}"
        )
        
        success_rate = (len(matches) / len(expected_drugs)) * 100
        print(f"{test_id}: {description} - –Ω–∞–π–¥–µ–Ω–æ {len(matches)} –∏–∑ {len(expected_drugs)} ({success_rate:.1f}%)")
    
    @pytest.mark.slow
    def test_query_variations(self, medical_db):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô"""
        headache_variations = [
            "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å",
            "–±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞", 
            "–º–∏–≥—Ä–µ–Ω—å",
            "–±–æ–ª—å –≤ –≥–æ–ª–æ–≤–µ",
        ]
        
        expected_drugs = ["–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª", "–ò–±—É–ø—Ä–æ—Ñ–µ–Ω", "–ê—Å–ø–∏—Ä–∏–Ω"]
        success_count = 0
        
        for variation in headache_variations:
            results = medical_db.search_drugs(variation, n_results=5)
            found_drugs = [result['–ª–µ–∫–∞—Ä—Å—Ç–≤–æ'] for result in results]
            
            matches = [drug for drug in expected_drugs if drug in found_drugs]
            if len(matches) >= 1:
                success_count += 1
                print(f"–í–∞—Ä–∏–∞—Ü–∏—è '{variation}': –Ω–∞–π–¥–µ–Ω—ã {matches}")
            else:
                print(f"–í–∞—Ä–∏–∞—Ü–∏—è '{variation}': –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ {matches}, –≤—Å–µ: {found_drugs}")
        
        success_rate = (success_count / len(headache_variations)) * 100
        assert success_rate >= 50, f"–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π: {success_rate:.1f}%"
        
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—Ä–∏–∞—Ü–∏–π: {success_rate:.1f}%")