import pytest
import time

class TestSystemIntegration:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    @pytest.mark.integration
    @pytest.mark.slow
    def test_comprehensive_system_performance(self, medical_db):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        test_scenarios = [
            {
                "type": "–ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–ø—Ç–æ–º—ã",
                "queries": ["–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–∞–ª–ª–µ—Ä–≥–∏—è", "–∫–∞—à–µ–ª—å"],
                "expected_min_results": 2
            },
            {
                "type": "—Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", 
                "queries": [
                    "—Å–∏–ª—å–Ω–∞—è –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π",
                    "–∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —Ü–≤–µ—Ç–µ–Ω–∏–µ –≤–µ—Å–Ω–æ–π",
                    "–≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ"
                ],
                "expected_min_results": 1
            },
            {
                "type": "–∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–π –ø–æ–∏—Å–∫",
                "queries": [
                    ("–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "–∞–Ω–∞–ª—å–≥–µ—Ç–∏–∫"),
                    ("–∞–ª–ª–µ—Ä–≥–∏—è", "–∞–Ω—Ç–∏–≥–∏—Å—Ç–∞–º–∏–Ω–Ω–æ–µ"), 
                    ("–∏–Ω—Ñ–µ–∫—Ü–∏—è", "–∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫")
                ],
                "expected_min_results": 1,
                "categorized": True
            }
        ]
        
        total_queries = 0
        successful_queries = 0
        performance_data = []
        
        for scenario in test_scenarios:
            print(f"\nüéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['type']}")
            
            for query_data in scenario["queries"]:
                total_queries += 1
                
                if scenario.get("categorized"):
                    query, category = query_data
                    search_func = lambda: medical_db.search_drugs(query, category_filter=category, n_results=5)
                    query_desc = f"'{query}' (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})"
                else:
                    query = query_data
                    search_func = lambda: medical_db.search_drugs(query, n_results=5)
                    query_desc = f"'{query}'"
                
                start_time = time.time()
                results = search_func()
                search_time = time.time() - start_time
                performance_data.append(search_time)
                
                if len(results) >= scenario["expected_min_results"]:
                    successful_queries += 1
                    status = "‚úÖ"
                else:
                    status = "‚ùå"
                
                print(f"   {status} {query_desc}: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {search_time:.3f}—Å")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success_rate = (successful_queries / total_queries) * 100
        avg_performance = sum(performance_data) / len(performance_data)
        
        print(f"\nüìä –ò–¢–û–ì–ò –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_queries}/{total_queries} ({success_rate:.1f}%)")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {avg_performance:.3f} —Å–µ–∫")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {sum(performance_data):.2f} —Å–µ–∫")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
        assert success_rate >= 60, f"–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%"
        assert avg_performance < 1.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {avg_performance:.3f} —Å–µ–∫"
        
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—à–ª–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
    
    def test_system_reliability(self, medical_db):
        """–¢–µ—Å—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        query = "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"
        
        results_sets = []
        for i in range(5):
            results = medical_db.search_drugs(query, n_results=3)
            results_sets.append([r['–ª–µ–∫–∞—Ä—Å—Ç–≤–æ'] for r in results])
        
        first_set = results_sets[0]
        consistent_count = 0
        
        for result_set in results_sets[1:]:
            if set(first_set) == set(result_set):
                consistent_count += 1
        
        consistency_rate = consistent_count / (len(results_sets) - 1)
        assert consistency_rate >= 0.6, f"–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {consistency_rate:.1%}"
        
        print(f"‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {consistency_rate:.1%}")