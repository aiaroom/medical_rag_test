import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.vector_database import MedicalVectorDB
from src.llm_integration import LocalLLMClient, RAGSystem
import json

class AdvancedDrugSearch:
    def __init__(self, data_path: str):
        self.db = MedicalVectorDB(data_path)
        self.db.build_vector_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∏ RAG —Å–∏—Å—Ç–µ–º—ã
        self.llm_client = LocalLLMClient()
        self.rag_system = RAGSystem(self.db, self.llm_client)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.search_stats = {
            "total_searches": 0,
            "symptom_searches": 0,
            "drug_info_requests": 0
        }
    
    def smart_search(self, query: str, max_results: int = 5, use_llm: bool = True):
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å RAG"""
        self.search_stats["total_searches"] += 1
        
        print(f"üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫: {query}")
        
        # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        vector_results = self.db.search_drugs(query, max_results)
        
        if not vector_results:
            return {
                "results": [],
                "ai_advice": "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                "suggestions": ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "–û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ"]
            }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Å–æ–≤–µ—Ç–∞
        ai_advice = ""
        if use_llm and vector_results:
            print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Å–æ–≤–µ—Ç–∞...")
            ai_advice = self.rag_system.generate_medical_advice(query, vector_results)
        
        return {
            "results": vector_results,
            "ai_advice": ai_advice,
            "suggestions": self._generate_suggestions(vector_results)
        }
    
    def search_by_symptoms(self, symptoms: list, max_results: int = 5):
        """–ü–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É —Å–∏–º–ø—Ç–æ–º–æ–≤ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º"""
        self.search_stats["symptom_searches"] += 1
        
        query = " ".join(symptoms)
        print(f"üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —Å–∏–º–ø—Ç–æ–º–æ–≤: {', '.join(symptoms)}")
        
        return self.smart_search(query, max_results)
    
    def search_by_category(self, category: str, query: str = ""):
        """–ü–æ–∏—Å–∫ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        print(f"üîç –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {query}")
        return self.db.search_drugs(query, category_filter=category)
    
    def get_drug_info(self, drug_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ"""
        self.search_stats["drug_info_requests"] += 1
        
        results = self.db.search_drugs(drug_name, n_results=1)
        if results:
            drug_data = results[0]['–ø–æ–ª–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ']
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Ä–µ–∑—é–º–µ
            prompt = f"""–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ {drug_name}:

–û–ø–∏—Å–∞–Ω–∏–µ: {drug_data['–æ–ø–∏—Å–∞–Ω–∏–µ']}
–ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(drug_data['–ø–æ–∫–∞–∑–∞–Ω–∏—è'])}
–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(drug_data['–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è'])}
–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(drug_data['–ø–æ–±–æ—á–Ω—ã–µ_—ç—Ñ—Ñ–µ–∫—Ç—ã'])}

–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:"""
            
            ai_summary = self.llm_client.generate_response(prompt, temperature=0.1)
            
            return {
                "data": drug_data,
                "ai_summary": ai_summary
            }
        return None
    
    def compare_drugs(self, drug1: str, drug2: str):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤"""
        print(f"‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {drug1} vs {drug2}")
        return self.rag_system.compare_drugs(drug1, drug2)
    
    def get_categories(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = set()
        for drug in self.db.drugs_data:
            categories.add(drug.get('–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'))
        return list(categories)
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return self.search_stats
    
    def _generate_suggestions(self, results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        suggestions = []
        
        categories = set()
        for result in results:
            categories.add(result['–ø–æ–ª–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ']['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'])
        
        if categories:
            suggestions.append(f"–ü–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(list(categories)[:3])}")
        
        suggestions.append("–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É")
        
        return suggestions

    def _display_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ - –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î"""
        if not results:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–π vs –Ω–æ–≤—ã–π)
        if isinstance(results, dict) and 'results' in results:
            # –≠—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç smart_search (—Å AI-—Å–æ–≤–µ—Ç–æ–º)
            search_data = results
            results = search_data['results']
            
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for result in results:
                self._display_single_result(result)
            
            if search_data.get('ai_advice'):
                print(f"\nü§ñ AI-—Å–æ–≤–µ—Ç:\n{search_data['ai_advice']}")
            
            if search_data.get('suggestions'):
                print(f"\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: {', '.join(search_data['suggestions'])}")
                
        else:
            # –≠—Ç–æ –ø—Ä—è–º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ vector_database
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for result in results:
                self._display_single_result(result)

    def _display_single_result(self, result):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        drug_data = result['–ø–æ–ª–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ']
        print(f"\n‚≠ê {result['—Ä–µ–π—Ç–∏–Ω–≥']}. {result['–ª–µ–∫–∞—Ä—Å—Ç–≤–æ']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {result['—Å—Ö–æ–∂–µ—Å—Ç—å']})")
        print(f"   üìù {drug_data['–æ–ø–∏—Å–∞–Ω–∏–µ']}")
        print(f"   üíä –ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(drug_data['–ø–æ–∫–∞–∑–∞–Ω–∏—è'][:3])}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(drug_data['–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è'][:2])}")
        print(f"   üìè –î–æ–∑–∏—Ä–æ–≤–∫–∞: {drug_data['–¥–æ–∑–∏—Ä–æ–≤–∫–∞'][:80]}...")
        print("   " + "-" * 50)

    def search_by_category_enhanced(self, category: str, symptoms: list = None):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏"""
        print(f"üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        
        if symptoms:
            query = " ".join(symptoms)
            print(f"   –°–∏–º–ø—Ç–æ–º—ã: {', '.join(symptoms)}")
        else:
            query = ""
            print("   –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = self.db.search_drugs(query, category_filter=category, n_results=10)
        
        if not results:
            print("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return []
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(results)} –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':")
        
        for i, result in enumerate(results, 1):
            drug = result['–ø–æ–ª–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ']
            print(f"\n{i}. üíä {drug['–Ω–∞–∑–≤–∞–Ω–∏–µ']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {result['—Å—Ö–æ–∂–µ—Å—Ç—å']})")
            print(f"   üìù {drug['–æ–ø–∏—Å–∞–Ω–∏–µ']}")
            print(f"   üéØ –ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(drug['–ø–æ–∫–∞–∑–∞–Ω–∏—è'][:2])}")
            print(f"   üíä –î–æ–∑–∏—Ä–æ–≤–∫–∞: {drug['–¥–æ–∑–∏—Ä–æ–≤–∫–∞'][:80]}...")
        
        return results

    def interactive_search(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞"""
        print("üéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ü–û–ò–°–ö –õ–ï–ö–ê–†–°–¢–í")
        print("=" * 50)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:")
            print("1. üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤")
            print("2. ü§í –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º") 
            print("3. üìÇ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            print("4. üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ")
            print("5. ‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
            print("6. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("7. üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            print("8. üö™ –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-8): ").strip()
            
            if choice == "1":
                query = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (—Å–∏–º–ø—Ç–æ–º—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç.–¥.): ").strip()
                results = self.smart_search(query)
                self._display_results(results)
                
            elif choice == "2":
                symptoms = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").split(',')
                symptoms = [s.strip() for s in symptoms if s.strip()]
                results = self.search_by_symptoms(symptoms)
                self._display_results(results)
                
            elif choice == "3":
                categories = self.get_categories()
                print(f"\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}):")
                for i, cat in enumerate(categories, 1):
                    print(f"   {i}. {cat}")
                
                category_input = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä): ").strip()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                if category_input.isdigit():
                    index = int(category_input) - 1
                    if 0 <= index < len(categories):
                        category = categories[index]
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                        continue
                else:
                    category = category_input
                    if category not in categories:
                        print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", ", ".join(categories))
                        continue
            
                symptoms_input = input("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã (–∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö): ").strip()
                symptoms = [s.strip() for s in symptoms_input.split(',')] if symptoms_input else []
                
                results = self.search_by_category_enhanced(category, symptoms)
                
            elif choice == "4":
                drug_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ").strip()
                info = self.get_drug_info(drug_name)
                
                if info:
                    drug = info['data']
                    print(f"\nüíä {drug['–Ω–∞–∑–≤–∞–Ω–∏–µ']}")
                    print(f"üìù {drug['–æ–ø–∏—Å–∞–Ω–∏–µ']}")
                    print(f"üéØ –ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(drug['–ø–æ–∫–∞–∑–∞–Ω–∏—è'])}")
                    print(f"‚ö†Ô∏è  –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(drug['–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è'])}")
                    print(f"üíä –î–æ–∑–∏—Ä–æ–≤–∫–∞: {drug['–¥–æ–∑–∏—Ä–æ–≤–∫–∞']}")
                    print(f"üî¨ –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(drug['–ø–æ–±–æ—á–Ω—ã–µ_—ç—Ñ—Ñ–µ–∫—Ç—ã'])}")
                    
                    if info['ai_summary']:
                        print(f"\nü§ñ –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:\n{info['ai_summary']}")
                else:
                    print("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            elif choice == "5":
                drug1 = input("–ü–µ—Ä–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: ").strip()
                drug2 = input("–í—Ç–æ—Ä–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: ").strip()
                
                comparison = self.compare_drugs(drug1, drug2)
                print(f"\n‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {drug1} –∏ {drug2}:")
                print(comparison)
            
            elif choice == "6":
                stats = self.get_stats()
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
                print(f"   –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {stats['total_searches']}")
                print(f"   –ü–æ–∏—Å–∫–æ–≤ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º: {stats['symptom_searches']}")
                print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {stats['drug_info_requests']}")
            
            elif choice == "7":
                categories = self.get_categories()
                print(f"\nüìã –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò –õ–ï–ö–ê–†–°–¢–í ({len(categories)}):")
                print("=" * 40)
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                categories_sorted = sorted(categories)
                current_letter = ""
                
                for category in categories_sorted:
                    first_letter = category[0].upper() if category else ""
                    if first_letter != current_letter:
                        print(f"\n{first_letter}:")
                        current_letter = first_letter
                    print(f"   üìç {category}")
            
            elif choice == "8":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    search_system = AdvancedDrugSearch("../data/drugs_database.json")
    search_system.interactive_search()